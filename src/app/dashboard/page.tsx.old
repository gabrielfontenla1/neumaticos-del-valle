'use client'

import { useState, useEffect } from 'react'
import { createClientComponentClient } from '@supabase/auth-helpers-nextjs'
import { useRouter } from 'next/navigation'
import Link from 'next/link'
import { motion } from 'framer-motion'
import {
  Users,
  Calendar,
  Tag,
  Package,
  TrendingUp,
  LogOut,
  Home,
  Plus,
  Eye,
  Clock,
  CheckCircle,
  XCircle
} from 'lucide-react'

interface Profile {
  id: string
  email: string
  full_name: string
  role: string
  branch_id: string | null
}

interface Stats {
  totalAppointments: number
  pendingAppointments: number
  completedAppointments: number
  activeVouchers: number
  totalProducts: number
}

export default function DashboardPage() {
  const [profile, setProfile] = useState<Profile | null>(null)
  const [stats, setStats] = useState<Stats>({
    totalAppointments: 0,
    pendingAppointments: 0,
    completedAppointments: 0,
    activeVouchers: 0,
    totalProducts: 0
  })
  const [loading, setLoading] = useState(true)
  const [recentAppointments, setRecentAppointments] = useState<any[]>([])
  const [recentVouchers, setRecentVouchers] = useState<any[]>([])

  const router = useRouter()
  const supabase = createClientComponentClient()

  useEffect(() => {
    fetchDashboardData()
  }, [])

  const fetchDashboardData = async () => {
    try {
      // Get current user
      const { data: { user } } = await supabase.auth.getUser()

      if (!user) {
        router.push('/auth/login')
        return
      }

      // Get user profile
      const { data: profileData } = await supabase
        .from('profiles')
        .select('*')
        .eq('id', user.id)
        .single()

      if (profileData) {
        setProfile(profileData)

        // Fetch stats based on role and branch
        await fetchStats(profileData)
        await fetchRecentData(profileData)
      }
    } catch (error) {
      console.error('Error fetching dashboard data:', error)
    } finally {
      setLoading(false)
    }
  }

  const fetchStats = async (profile: Profile) => {
    // Fetch appointments
    let appointmentsQuery = supabase.from('appointments').select('status', { count: 'exact' })

    if (profile.role === 'vendedor' && profile.branch_id) {
      // Get branch name for vendedor
      const { data: branch } = await supabase
        .from('branches')
        .select('name')
        .eq('id', profile.branch_id)
        .single()

      if (branch) {
        appointmentsQuery = appointmentsQuery.eq('branch', branch.name)
      }
    }

    const { data: appointments, count: totalAppointments } = await appointmentsQuery

    const pendingAppointments = appointments?.filter(a => a.status === 'pending').length || 0
    const completedAppointments = appointments?.filter(a => a.status === 'completed').length || 0

    // Fetch vouchers
    let vouchersQuery = supabase
      .from('vouchers')
      .select('*', { count: 'exact' })
      .eq('status', 'active')

    if (profile.role === 'vendedor' && profile.branch_id) {
      vouchersQuery = vouchersQuery.eq('branch_id', profile.branch_id)
    }

    const { count: activeVouchers } = await vouchersQuery

    // Fetch products count
    const { count: totalProducts } = await supabase
      .from('products')
      .select('*', { count: 'exact' })

    setStats({
      totalAppointments: totalAppointments || 0,
      pendingAppointments,
      completedAppointments,
      activeVouchers: activeVouchers || 0,
      totalProducts: totalProducts || 0
    })
  }

  const fetchRecentData = async (profile: Profile) => {
    // Fetch recent appointments
    let appointmentsQuery = supabase
      .from('appointments')
      .select('*')
      .order('created_at', { ascending: false })
      .limit(5)

    if (profile.role === 'vendedor' && profile.branch_id) {
      const { data: branch } = await supabase
        .from('branches')
        .select('name')
        .eq('id', profile.branch_id)
        .single()

      if (branch) {
        appointmentsQuery = appointmentsQuery.eq('branch', branch.name)
      }
    }

    const { data: appointments } = await appointmentsQuery
    setRecentAppointments(appointments || [])

    // Fetch recent vouchers
    let vouchersQuery = supabase
      .from('vouchers')
      .select('*')
      .order('created_at', { ascending: false })
      .limit(5)

    if (profile.role === 'vendedor' && profile.branch_id) {
      vouchersQuery = vouchersQuery.eq('branch_id', profile.branch_id)
    }

    const { data: vouchers } = await vouchersQuery
    setRecentVouchers(vouchers || [])
  }

  const handleLogout = async () => {
    await supabase.auth.signOut()
    router.push('/')
  }

  if (loading) {
    return (
      <div className="min-h-screen bg-black flex items-center justify-center">
        <div className="animate-spin rounded-full h-12 w-12 border-t-2 border-[#FFC700]"></div>
      </div>
    )
  }

  return (
    <div className="min-h-screen bg-black">
      {/* Header */}
      <header className="bg-gray-900 border-b border-gray-800">
        <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-4">
          <div className="flex items-center justify-between">
            <div className="flex items-center gap-4">
              <Link href="/" className="text-[#FFC700] hover:text-[#FFD700] transition-colors">
                <Home className="w-6 h-6" />
              </Link>
              <div>
                <h1 className="text-2xl font-bold text-white">Dashboard</h1>
                <p className="text-gray-400 text-sm">
                  Bienvenido, {profile?.full_name || profile?.email}
                </p>
              </div>
            </div>
            <div className="flex items-center gap-4">
              <span className="px-3 py-1 bg-[#FFC700]/20 text-[#FFC700] rounded-full text-sm font-medium">
                {profile?.role === 'admin' ? 'Administrador' : 'Vendedor'}
              </span>
              <button
                onClick={handleLogout}
                className="flex items-center gap-2 text-gray-400 hover:text-white transition-colors"
              >
                <LogOut className="w-5 h-5" />
                <span className="hidden sm:inline">Cerrar Sesi√≥n</span>
              </button>
            </div>
          </div>
        </div>
      </header>

      {/* Main Content */}
      <main className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
        {/* Stats Grid */}
        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6 mb-8">
          <motion.div
            initial={{ opacity: 0, y: 20 }}
            animate={{ opacity: 1, y: 0 }}
            transition={{ delay: 0.1 }}
            className="bg-gray-900 rounded-xl p-6 border border-gray-800"
          >
            <div className="flex items-center justify-between">
              <div>
                <p className="text-gray-400 text-sm">Turnos Totales</p>
                <p className="text-3xl font-bold text-white mt-2">
                  {stats.totalAppointments}
                </p>
              </div>
              <Calendar className="w-10 h-10 text-[#FFC700] opacity-50" />
            </div>
          </motion.div>

          <motion.div
            initial={{ opacity: 0, y: 20 }}
            animate={{ opacity: 1, y: 0 }}
            transition={{ delay: 0.2 }}
            className="bg-gray-900 rounded-xl p-6 border border-gray-800"
          >
            <div className="flex items-center justify-between">
              <div>
                <p className="text-gray-400 text-sm">Turnos Pendientes</p>
                <p className="text-3xl font-bold text-white mt-2">
                  {stats.pendingAppointments}
                </p>
              </div>
              <Clock className="w-10 h-10 text-yellow-500 opacity-50" />
            </div>
          </motion.div>

          <motion.div
            initial={{ opacity: 0, y: 20 }}
            animate={{ opacity: 1, y: 0 }}
            transition={{ delay: 0.3 }}
            className="bg-gray-900 rounded-xl p-6 border border-gray-800"
          >
            <div className="flex items-center justify-between">
              <div>
                <p className="text-gray-400 text-sm">Vouchers Activos</p>
                <p className="text-3xl font-bold text-white mt-2">
                  {stats.activeVouchers}
                </p>
              </div>
              <Tag className="w-10 h-10 text-green-500 opacity-50" />
            </div>
          </motion.div>

          <motion.div
            initial={{ opacity: 0, y: 20 }}
            animate={{ opacity: 1, y: 0 }}
            transition={{ delay: 0.4 }}
            className="bg-gray-900 rounded-xl p-6 border border-gray-800"
          >
            <div className="flex items-center justify-between">
              <div>
                <p className="text-gray-400 text-sm">Productos</p>
                <p className="text-3xl font-bold text-white mt-2">
                  {stats.totalProducts}
                </p>
              </div>
              <Package className="w-10 h-10 text-blue-500 opacity-50" />
            </div>
          </motion.div>
        </div>

        {/* Quick Actions */}
        <div className="grid grid-cols-1 md:grid-cols-3 gap-4 mb-8">
          <Link
            href="/vouchers/new"
            className="bg-[#FFC700] text-black font-semibold py-3 px-6 rounded-lg hover:bg-[#FFD700] transition-colors flex items-center justify-center gap-2"
          >
            <Plus className="w-5 h-5" />
            Crear Voucher
          </Link>
          <Link
            href="/admin/appointments"
            className="bg-gray-900 text-white font-semibold py-3 px-6 rounded-lg hover:bg-gray-800 transition-colors flex items-center justify-center gap-2 border border-gray-800"
          >
            <Eye className="w-5 h-5" />
            Ver Turnos
          </Link>
          <Link
            href="/vouchers/manage"
            className="bg-gray-900 text-white font-semibold py-3 px-6 rounded-lg hover:bg-gray-800 transition-colors flex items-center justify-center gap-2 border border-gray-800"
          >
            <Tag className="w-5 h-5" />
            Gestionar Vouchers
          </Link>
        </div>

        {/* Recent Data Tables */}
        <div className="grid grid-cols-1 lg:grid-cols-2 gap-8">
          {/* Recent Appointments */}
          <motion.div
            initial={{ opacity: 0, x: -20 }}
            animate={{ opacity: 1, x: 0 }}
            transition={{ delay: 0.5 }}
            className="bg-gray-900 rounded-xl p-6 border border-gray-800"
          >
            <h2 className="text-xl font-bold text-white mb-4">Turnos Recientes</h2>
            <div className="space-y-3">
              {recentAppointments.length > 0 ? (
                recentAppointments.map((appointment) => (
                  <div
                    key={appointment.id}
                    className="flex items-center justify-between p-3 bg-gray-800 rounded-lg"
                  >
                    <div>
                      <p className="text-white font-medium">
                        {appointment.customer_name}
                      </p>
                      <p className="text-gray-400 text-sm">
                        {new Date(appointment.date).toLocaleDateString()} - {appointment.time}
                      </p>
                    </div>
                    <span
                      className={`px-2 py-1 rounded-full text-xs font-medium ${
                        appointment.status === 'completed'
                          ? 'bg-green-500/20 text-green-400'
                          : appointment.status === 'cancelled'
                          ? 'bg-red-500/20 text-red-400'
                          : 'bg-yellow-500/20 text-yellow-400'
                      }`}
                    >
                      {appointment.status === 'completed' ? 'Completado' :
                       appointment.status === 'cancelled' ? 'Cancelado' : 'Pendiente'}
                    </span>
                  </div>
                ))
              ) : (
                <p className="text-gray-500 text-center py-4">No hay turnos recientes</p>
              )}
            </div>
          </motion.div>

          {/* Recent Vouchers */}
          <motion.div
            initial={{ opacity: 0, x: 20 }}
            animate={{ opacity: 1, x: 0 }}
            transition={{ delay: 0.6 }}
            className="bg-gray-900 rounded-xl p-6 border border-gray-800"
          >
            <h2 className="text-xl font-bold text-white mb-4">Vouchers Recientes</h2>
            <div className="space-y-3">
              {recentVouchers.length > 0 ? (
                recentVouchers.map((voucher) => (
                  <div
                    key={voucher.id}
                    className="flex items-center justify-between p-3 bg-gray-800 rounded-lg"
                  >
                    <div>
                      <p className="text-white font-medium">{voucher.code}</p>
                      <p className="text-gray-400 text-sm">
                        {voucher.customer_name} - {voucher.discount_percentage}% desc
                      </p>
                    </div>
                    <span
                      className={`px-2 py-1 rounded-full text-xs font-medium ${
                        voucher.status === 'active'
                          ? 'bg-green-500/20 text-green-400'
                          : voucher.status === 'used'
                          ? 'bg-gray-500/20 text-gray-400'
                          : 'bg-red-500/20 text-red-400'
                      }`}
                    >
                      {voucher.status === 'active' ? 'Activo' :
                       voucher.status === 'used' ? 'Usado' : 'Expirado'}
                    </span>
                  </div>
                ))
              ) : (
                <p className="text-gray-500 text-center py-4">No hay vouchers recientes</p>
              )}
            </div>
          </motion.div>
        </div>
      </main>
    </div>
  )
}